/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * AI Contracts System API
 * API for managing and validating technical dependency contracts
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ContractFileDto
} from '.././model';

import { customAxiosInstance } from '../../axios-instance';




/**
 * @summary Get all contracts
 */
export const contractsControllerGetAllContracts = (
    
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<ContractFileDto[]>(
      {url: `http://localhost/api/contracts`, method: 'GET', signal
    },
      );
    }
  



export const getContractsControllerGetAllContractsQueryKey = () => {
    return [
    `http://localhost/api/contracts`
    ] as const;
    }

    
export const getContractsControllerGetAllContractsQueryOptions = <TData = Awaited<ReturnType<typeof contractsControllerGetAllContracts>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof contractsControllerGetAllContracts>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getContractsControllerGetAllContractsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof contractsControllerGetAllContracts>>> = ({ signal }) => contractsControllerGetAllContracts(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof contractsControllerGetAllContracts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ContractsControllerGetAllContractsQueryResult = NonNullable<Awaited<ReturnType<typeof contractsControllerGetAllContracts>>>
export type ContractsControllerGetAllContractsQueryError = unknown


export function useContractsControllerGetAllContracts<TData = Awaited<ReturnType<typeof contractsControllerGetAllContracts>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof contractsControllerGetAllContracts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof contractsControllerGetAllContracts>>,
          TError,
          Awaited<ReturnType<typeof contractsControllerGetAllContracts>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useContractsControllerGetAllContracts<TData = Awaited<ReturnType<typeof contractsControllerGetAllContracts>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof contractsControllerGetAllContracts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof contractsControllerGetAllContracts>>,
          TError,
          Awaited<ReturnType<typeof contractsControllerGetAllContracts>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useContractsControllerGetAllContracts<TData = Awaited<ReturnType<typeof contractsControllerGetAllContracts>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof contractsControllerGetAllContracts>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all contracts
 */

export function useContractsControllerGetAllContracts<TData = Awaited<ReturnType<typeof contractsControllerGetAllContracts>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof contractsControllerGetAllContracts>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getContractsControllerGetAllContractsQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Validate all contracts
 */
export const contractsControllerValidateContracts = (
    
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `http://localhost/api/contracts/validate`, method: 'GET', signal
    },
      );
    }
  



export const getContractsControllerValidateContractsQueryKey = () => {
    return [
    `http://localhost/api/contracts/validate`
    ] as const;
    }

    
export const getContractsControllerValidateContractsQueryOptions = <TData = Awaited<ReturnType<typeof contractsControllerValidateContracts>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof contractsControllerValidateContracts>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getContractsControllerValidateContractsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof contractsControllerValidateContracts>>> = ({ signal }) => contractsControllerValidateContracts(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof contractsControllerValidateContracts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ContractsControllerValidateContractsQueryResult = NonNullable<Awaited<ReturnType<typeof contractsControllerValidateContracts>>>
export type ContractsControllerValidateContractsQueryError = unknown


export function useContractsControllerValidateContracts<TData = Awaited<ReturnType<typeof contractsControllerValidateContracts>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof contractsControllerValidateContracts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof contractsControllerValidateContracts>>,
          TError,
          Awaited<ReturnType<typeof contractsControllerValidateContracts>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useContractsControllerValidateContracts<TData = Awaited<ReturnType<typeof contractsControllerValidateContracts>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof contractsControllerValidateContracts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof contractsControllerValidateContracts>>,
          TError,
          Awaited<ReturnType<typeof contractsControllerValidateContracts>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useContractsControllerValidateContracts<TData = Awaited<ReturnType<typeof contractsControllerValidateContracts>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof contractsControllerValidateContracts>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Validate all contracts
 */

export function useContractsControllerValidateContracts<TData = Awaited<ReturnType<typeof contractsControllerValidateContracts>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof contractsControllerValidateContracts>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getContractsControllerValidateContractsQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



