/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * AI Contracts System API
 * API for managing and validating technical dependency contracts
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ContractFileDto
} from '.././model';

import { customAxiosInstance } from '../../axios-instance';




/**
 * @summary Get all contracts
 */
export const contractsControllerGetAllContracts = (
    
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<ContractFileDto[]>(
      {url: `http://localhost:3000/contracts`, method: 'GET', signal
    },
      );
    }
  



export const getContractsControllerGetAllContractsQueryKey = () => {
    return [
    `http://localhost:3000/contracts`
    ] as const;
    }

    
export const getContractsControllerGetAllContractsQueryOptions = <TData = Awaited<ReturnType<typeof contractsControllerGetAllContracts>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof contractsControllerGetAllContracts>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getContractsControllerGetAllContractsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof contractsControllerGetAllContracts>>> = ({ signal }) => contractsControllerGetAllContracts(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof contractsControllerGetAllContracts>>, TError, TData> & { queryKey: QueryKey }
}

export type ContractsControllerGetAllContractsQueryResult = NonNullable<Awaited<ReturnType<typeof contractsControllerGetAllContracts>>>
export type ContractsControllerGetAllContractsQueryError = unknown


/**
 * @summary Get all contracts
 */

export function useContractsControllerGetAllContracts<TData = Awaited<ReturnType<typeof contractsControllerGetAllContracts>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof contractsControllerGetAllContracts>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getContractsControllerGetAllContractsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Validate all contracts
 */
export const contractsControllerValidateContracts = (
    
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `http://localhost:3000/contracts/validate`, method: 'GET', signal
    },
      );
    }
  



export const getContractsControllerValidateContractsQueryKey = () => {
    return [
    `http://localhost:3000/contracts/validate`
    ] as const;
    }

    
export const getContractsControllerValidateContractsQueryOptions = <TData = Awaited<ReturnType<typeof contractsControllerValidateContracts>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof contractsControllerValidateContracts>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getContractsControllerValidateContractsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof contractsControllerValidateContracts>>> = ({ signal }) => contractsControllerValidateContracts(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof contractsControllerValidateContracts>>, TError, TData> & { queryKey: QueryKey }
}

export type ContractsControllerValidateContractsQueryResult = NonNullable<Awaited<ReturnType<typeof contractsControllerValidateContracts>>>
export type ContractsControllerValidateContractsQueryError = unknown


/**
 * @summary Validate all contracts
 */

export function useContractsControllerValidateContracts<TData = Awaited<ReturnType<typeof contractsControllerValidateContracts>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof contractsControllerValidateContracts>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getContractsControllerValidateContractsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



