/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * AI Contracts System API
 * API for managing and validating technical dependency contracts
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import { customAxiosInstance } from '../../axios-instance';




export const appControllerGetHello = (
    
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `http://localhost:3000/`, method: 'GET', signal
    },
      );
    }
  



export const getAppControllerGetHelloQueryKey = () => {
    return [
    `http://localhost:3000/`
    ] as const;
    }

    
export const getAppControllerGetHelloQueryOptions = <TData = Awaited<ReturnType<typeof appControllerGetHello>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAppControllerGetHelloQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof appControllerGetHello>>> = ({ signal }) => appControllerGetHello(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData> & { queryKey: QueryKey }
}

export type AppControllerGetHelloQueryResult = NonNullable<Awaited<ReturnType<typeof appControllerGetHello>>>
export type AppControllerGetHelloQueryError = unknown



export function useAppControllerGetHello<TData = Awaited<ReturnType<typeof appControllerGetHello>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getAppControllerGetHelloQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const appControllerGetHealth = (
    
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `http://localhost:3000/health`, method: 'GET', signal
    },
      );
    }
  



export const getAppControllerGetHealthQueryKey = () => {
    return [
    `http://localhost:3000/health`
    ] as const;
    }

    
export const getAppControllerGetHealthQueryOptions = <TData = Awaited<ReturnType<typeof appControllerGetHealth>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHealth>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAppControllerGetHealthQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof appControllerGetHealth>>> = ({ signal }) => appControllerGetHealth(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHealth>>, TError, TData> & { queryKey: QueryKey }
}

export type AppControllerGetHealthQueryResult = NonNullable<Awaited<ReturnType<typeof appControllerGetHealth>>>
export type AppControllerGetHealthQueryError = unknown



export function useAppControllerGetHealth<TData = Awaited<ReturnType<typeof appControllerGetHealth>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHealth>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getAppControllerGetHealthQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const appControllerGetTest = (
    
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `http://localhost:3000/test`, method: 'GET', signal
    },
      );
    }
  



export const getAppControllerGetTestQueryKey = () => {
    return [
    `http://localhost:3000/test`
    ] as const;
    }

    
export const getAppControllerGetTestQueryOptions = <TData = Awaited<ReturnType<typeof appControllerGetTest>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof appControllerGetTest>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAppControllerGetTestQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof appControllerGetTest>>> = ({ signal }) => appControllerGetTest(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof appControllerGetTest>>, TError, TData> & { queryKey: QueryKey }
}

export type AppControllerGetTestQueryResult = NonNullable<Awaited<ReturnType<typeof appControllerGetTest>>>
export type AppControllerGetTestQueryError = unknown



export function useAppControllerGetTest<TData = Awaited<ReturnType<typeof appControllerGetTest>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof appControllerGetTest>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getAppControllerGetTestQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const appControllerVerifyNeo4jConnection = (
    
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `http://localhost:3000/neo4j/verify`, method: 'GET', signal
    },
      );
    }
  



export const getAppControllerVerifyNeo4jConnectionQueryKey = () => {
    return [
    `http://localhost:3000/neo4j/verify`
    ] as const;
    }

    
export const getAppControllerVerifyNeo4jConnectionQueryOptions = <TData = Awaited<ReturnType<typeof appControllerVerifyNeo4jConnection>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof appControllerVerifyNeo4jConnection>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAppControllerVerifyNeo4jConnectionQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof appControllerVerifyNeo4jConnection>>> = ({ signal }) => appControllerVerifyNeo4jConnection(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof appControllerVerifyNeo4jConnection>>, TError, TData> & { queryKey: QueryKey }
}

export type AppControllerVerifyNeo4jConnectionQueryResult = NonNullable<Awaited<ReturnType<typeof appControllerVerifyNeo4jConnection>>>
export type AppControllerVerifyNeo4jConnectionQueryError = unknown



export function useAppControllerVerifyNeo4jConnection<TData = Awaited<ReturnType<typeof appControllerVerifyNeo4jConnection>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof appControllerVerifyNeo4jConnection>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getAppControllerVerifyNeo4jConnectionQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



